package code_forces;
import java.util.*;
public class B {
	public static void main(String []args) {
		Scanner sc=new Scanner(System.in);
		Solution s=new Solution();
		int f[][]= {{1,6},{3,7},{9,12},{4,13}};
			int p[]= {2,3,7,11};
			System.out.println(Arrays.toString(s.fullBloomFlowers(f, p)));
			}
}
class Solution {
    public int[] fullBloomFlowers(int[][] f, int[] p) {
       
        int a[]=new int[f.length];
        int b[]=new int[f.length];
        for(int i=0;i<f.length;i++){
            a[i]=f[i][0];
            b[i]=f[i][1];
            
        }
        Arrays.sort(a);
        Arrays.sort(b);
        int res[]=new int[p.length];
        
        System.out.println(Arrays.toString(a));
        System.out.println(Arrays.toString(b));
        for(int i=0;i<p.length;i++){
            int l=lower(b,p[i])+1
            		;
            int u=upper(a,p[i]);
            System.out.println(l+" ll");
            System.out.println(u+" uu");
        res[i]=Math.abs(u-l);    
        }
        return res;
        
    }
    int lower(int a[],int t){
        int index=Arrays.binarySearch(a,t);
        if(index<0){
            return index=-index-2;
        }else{
            while(index<a.length-1){
                if(a[index+1]==t)index++;
                else return index;
            }
            return index;
        }
    }
     int upper(int arr[], int key){
        int index = Arrays.binarySearch(arr, key);
        int n = arr.length;
        if (index < 0) {
            int upperBound = Math.abs(index) - 1;
            if (upperBound < n)
               return  upperBound;
        }
        else {
            while (index < n) {
                if (arr[index] == key)
                    index++;
                else {
                    return index;
                }
            }
           return index;
        }
		return n;
    }
  
    
}