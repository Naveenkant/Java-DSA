package code_forces;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
public class B {

    public static int ans = Integer.MAX_VALUE;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {

        	int n=sc.nextInt();
        	int m=sc.nextInt();
        	String s[]=new String[n];
        	for(int i=0;i<n;i++) {
        			s[i]=sc.next();
        	}
        	char c[][]=new char[n][m];
        	for(int i=0;i<s.length;i++) {
        		for(int j=0;j<s[0].length();j++) {
        			c[i][j]=s[i].charAt(j);
        			System.out.print(c[i][j]+" ");
        		}
        		System.out.println();
        	}
        	make(c,c.length,c[0].length,0,0,0)   ;
        	System.out.println(max);
        }

    }

  static  boolean isSafe(char c[][],int n,int m,int i,int j) {
    	 int dx[] = {1,1,1,-1,-1,-1,0,0};
    	 int dy[] = {0,-1,1,-1,0,1,1,-1};
    	 int how=0;
    	 if(c[i][j]=='*')return false;
    	for(int k=0;k<8;k++) {
    		int x=i+dx[k];
    		int y=j+dy[k];
    		if(x>=0 && y>=0 && x<n && y<m) {
    			if(c[x][y]=='*')how++;
    		}
    	}
    	if(how<3)return true;
    	return false;
    }
  static boolean isValid(int row, int col, char[][] mat, int n,int m) {
 		if (row >= 0 && row < n && col >= 0 && col < m && mat[row][col] == '.') {
 			return true;
 		}
 		return false;
 	}
   static int max=0;
  static int dx[]= {1,-1,0,0};
  static int dy[]= {0,0,1,-1};
   static void make(char mat[][],int n,int m,int x,int y,int turn) {
    	if(x==n-1 && y==m-1) {
    		max=Math.max(max, turn);
    		return;
    	}
    	        
    	for (int  i= 0; i < 4; i++) {
   			int row = x + dx[i];
   			int col = y + dy[i];
   			if (isValid(row, col, mat, n,m)&& isSafe(mat,n,m,row,col)) {
   				mat[row][col] = '*';			 // used to track visited cells of matrix
   				make(mat, n,m, row, col,turn+1);
   				mat[row][col] = '.';			 // mark it unvisited yet explorable
   			}
   		}
    }

}